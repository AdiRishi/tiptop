extend type Query {
    assetById(id: ID!): Asset
}

"""
An asset is an abstracted object that represents some piece of data in this system.
Assets have different types and versions.
At any given time an asset can have only one "active" version which is the latest version
"""
interface Asset {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    deletedAt: DateTime

    """
    This is a unique identifier that is most useful when sharing asset IDs externally (e.g. in a URL or to another service)
    """
    guid: UUID!

    """
    All assets must belong to a folder
    """
    folder: Folder!

    """
    Reveals the underlying type of this asset. Use this to determine which asset type to query for further details
    """
    type: AssetType!
    metafields: [MetaField!]!
    versionSlug: NonEmptyString!
    isLatest: Boolean!
}

enum AssetType {
    RICH_TEXT
    VIDEO
}

"""
Every asset can have "data" fields stored alongside it.
Metafields can have multiple different types, e.g string, json, date, etc.
- Each type must be serializable to a string
- Metafields are queriable with high perforamnce (indexed)
"""
type MetaField {
    id: ID!
    key: NonEmptyString!
    valueType: MetaFieldValueType!
    value: NonEmptyString

    asset: Asset!
}

enum MetaFieldValueType {
    TEXT
    DATE
}

type VideoAsset implements Asset {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    deletedAt: DateTime
    guid: UUID!
    folder: Folder!
    type: AssetType!
    metafields: [MetaField!]!
    versionSlug: NonEmptyString!
    isLatest: Boolean!

    cfData: CfVideoData!
}

type CfVideoData {
    uid: ID!
    allowedOrigins: [NonEmptyString!]!
}

type RichTextAsset implements Asset {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    deletedAt: DateTime
    guid: UUID!
    folder: Folder!
    type: AssetType!
    metafields: [MetaField!]!
    versionSlug: NonEmptyString!
    isLatest: Boolean!

    """
    The name of the editor used to create this asset
    Can be used to interpret the format of JSON in contentJson
    """
    editorName: NonEmptyString!

    """
    The JSON representation of the editor state
    Editors serialize their content differently.
    Refer to editorName to find out what editor was used to create this JSON.
    """
    contentJson: JSON!
}
